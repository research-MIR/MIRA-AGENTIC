import { useQuery } from "@tanstack/react-query";
import { useSession } from "@/components/Auth/SessionContextProvider";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { ImageOff, View } from "lucide-react";
import { useImagePreview } from "@/context/ImagePreviewContext";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { useNavigate } from "react-router-dom";
import { ThemeToggle } from "@/components/ThemeToggle";
import { useLanguage } from "@/context/LanguageContext";
import { LanguageSwitcher } from "@/components/LanguageSwitcher";
import { useMemo } from "react";

interface ImageResult {
  publicUrl: string;
  storagePath: string;
  jobId: string;
  source: 'direct_generator' | 'agent' | 'refiner';
}

const Gallery = () => {
  const { supabase, session } = useSession();
  const { showImage } = useImagePreview();
  const navigate = useNavigate();
  const { t } = useLanguage();

  const fetchGeneratedImages = async (): Promise<ImageResult[]> => {
    if (!session?.user) return [];
    console.log("[Gallery V3] Fetching jobs from Supabase...");
    const { data: jobs, error } = await supabase
      .from("mira-agent-jobs")
      .select("id, final_result, context")
      .eq("user_id", session.user.id)
      .eq("status", "complete")
      .order("created_at", { ascending: false });

    if (error) throw new Error(error.message);

    console.log(`[Gallery V3] Fetched ${jobs.length} raw jobs from DB.`);
    const allImages: ImageResult[] = [];

    for (const job of jobs) {
        const source = job.context?.source || 'agent';
        
        // Case 1: Images are directly in the final_result (Direct Generator, simple agent responses)
        if (job.final_result?.isImageGeneration && Array.isArray(job.final_result.images)) {
            console.log(`[Gallery V3][${job.id}] Found ${job.final_result.images.length} images in final_result.`);
            for (const image of job.final_result.images) {
                allImages.push({ ...image, jobId: job.id, source });
            }
        }

        // Case 2: Images are buried in the history (complex agent conversations)
        if (job.context?.history) {
            for (const turn of job.context.history) {
                if (turn.role === 'function' && turn.parts[0]?.functionResponse?.response?.isImageGeneration) {
                    const imagesInTurn = turn.parts[0].functionResponse.response.images;
                    if (Array.isArray(imagesInTurn)) {
                        console.log(`[Gallery V3][${job.id}] Found ${imagesInTurn.length} images in a history turn.`);
                        for (const image of imagesInTurn) {
                            // Avoid duplicates if the image is already in the list from final_result
                            if (!allImages.some(existing => existing.publicUrl === image.publicUrl)) {
                                allImages.push({ ...image, jobId: job.id, source });
                            }
                        }
                    }
                }
            }
        }
    }
    
    // Remove duplicates - sometimes the same image can be in history and final_result
    const uniqueImages = Array.from(new Map(allImages.map(item => [item.publicUrl, item])).values());

    console.log(`[Gallery V3] Finished processing. Found a total of ${uniqueImages.length} unique images.`);
    return uniqueImages;
  };

  const { data: allImages, isLoading, error } = useQuery<ImageResult[]>({
    queryKey: ["generatedImages", session?.user?.id],
    queryFn: fetchGeneratedImages,
    enabled: !!session?.user,
  });

  const { agentImages, directImages, refinedImages } = useMemo(() => {
    if (!allImages) {
      return { agentImages: [], directImages: [], refinedImages: [] };
    }
    const agent = allImages.filter(img => img.source === 'agent');
    const direct = allImages.filter(img => img.source === 'direct_generator');
    const refined = allImages.filter(img => img.source === 'refiner');
    return { agentImages: agent, directImages: direct, refinedImages: refined };
  }, [allImages]);

  const renderImageList = (imageList: ImageResult[] | undefined) => {
    if (!imageList || imageList.length === 0) {
      return (
        <div className="text-center text-muted-foreground col-span-full mt-8">
          <p>{t.noImagesYet}</p>
        </div>
      );
    }

    return imageList.map((image, index) => (
        <div key={`${image.jobId}-${index}`} className="relative group aspect-square">
          <img
            src={image.publicUrl}
            alt={`Generated by job ${image.jobId}`}
            className="w-full h-full object-cover rounded-lg cursor-pointer"
            onClick={() => showImage({ 
                images: imageList.map(img => ({ url: img.publicUrl, jobId: img.jobId })),
                currentIndex: index 
            })}
          />
          {image.source === 'agent' && (
            <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
              <Button variant="secondary" onClick={() => navigate(`/chat/${image.jobId}`)}>
                <View className="mr-2 h-4 w-4" /> {t.viewChat}
              </Button>
            </div>
          )}
        </div>
      )
    );
  };

  return (
    <div className="p-4 md:p-8 h-screen overflow-y-auto">
      <header className="pb-4 mb-8 border-b flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">{t.resultsGallery}</h1>
          <p className="text-muted-foreground">{t.galleryDescription}</p>
        </div>
        <div className="flex items-center gap-2">
          <LanguageSwitcher />
          <ThemeToggle />
        </div>
      </header>

      <Card>
        <CardHeader>
          <CardTitle>
            <Tabs defaultValue="all" className="w-full">
              <TabsList>
                <TabsTrigger value="all">{t.galleryTabsAll}</TabsTrigger>
                <TabsTrigger value="agent">{t.galleryTabsAgent}</TabsTrigger>
                <TabsTrigger value="direct">{t.galleryTabsDirect}</TabsTrigger>
                <TabsTrigger value="refined">{t.galleryTabsRefined}</TabsTrigger>
              </TabsList>
              <TabsContent value="all">
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mt-4">
                  {isLoading ? (
                    [...Array(12)].map((_, i) => <Skeleton key={i} className="aspect-square w-full" />)
                  ) : allImages && allImages.length > 0 ? (
                    renderImageList(allImages)
                  ) : (
                    <div className="col-span-full">
                      <Alert>
                        <ImageOff className="h-4 w-4" />
                        <AlertTitle>{t.noImagesYet}</AlertTitle>
                        <AlertDescription>{t.noImagesDescription}</AlertDescription>
                      </Alert>
                    </div>
                  )}
                </div>
              </TabsContent>
              <TabsContent value="agent">
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mt-4">
                  {isLoading ? (
                    [...Array(6)].map((_, i) => <Skeleton key={i} className="aspect-square w-full" />)
                  ) : (
                    renderImageList(agentImages)
                  )}
                </div>
              </TabsContent>
              <TabsContent value="direct">
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mt-4">
                  {isLoading ? (
                    [...Array(6)].map((_, i) => <Skeleton key={i} className="aspect-square w-full" />)
                  ) : (
                    renderImageList(directImages)
                  )}
                </div>
              </TabsContent>
              <TabsContent value="refined">
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mt-4">
                  {isLoading ? (
                    [...Array(6)].map((_, i) => <Skeleton key={i} className="aspect-square w-full" />)
                  ) : (
                    renderImageList(refinedImages)
                  )}
                </div>
              </TabsContent>
            </Tabs>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {error && <Alert variant="destructive">Error loading images: {error.message}</Alert>}
        </CardContent>
      </Card>
    </div>
  );
};

export default Gallery;