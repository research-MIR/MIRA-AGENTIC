import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';

const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { pack_id, user_id } = await req.json();
    if (!pack_id || !user_id) {
      throw new Error("pack_id and user_id are required.");
    }

    const supabase = createClient(SUPABASE_URL!, SUPABASE_SERVICE_ROLE_KEY!);
    const logPrefix = `[VTO-Report-Orchestrator][${pack_id}]`;
    console.log(`${logPrefix} Orchestrator invoked.`);

    // Clear old report and set status to indicate analysis is running
    await supabase
      .from('mira-agent-vto-packs-jobs')
      .update({
        synthesis_report: 'Analysis in progress...',
        synthesis_thinking: 'The analysis is currently being generated by the AI. This may take a few minutes.'
      })
      .eq('id', pack_id);

    // Asynchronously invoke the worker to do the heavy lifting
    supabase.functions.invoke('MIRA-AGENT-worker-vto-report-synthesis', {
      body: { pack_id, user_id }
    }).catch(err => {
      console.error(`${logPrefix} Failed to invoke worker:`, err);
      // Attempt to set an error state on the job
      supabase.from('mira-agent-vto-packs-jobs').update({
        synthesis_report: '# Analysis Failed\n\nCould not start the analysis worker.',
      }).eq('id', pack_id).then();
    });

    console.log(`${logPrefix} Worker invoked. Orchestrator job complete.`);
    return new Response(JSON.stringify({ success: true, message: "Analysis has been started in the background." }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    console.error("[VTO-Report-Orchestrator] Error:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});