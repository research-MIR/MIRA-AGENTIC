import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';

const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
const CHUNK_SIZE = 40;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { pack_id, user_id } = await req.json();
    if (!pack_id || !user_id) {
      throw new Error("pack_id and user_id are required.");
    }

    const supabase = createClient(SUPABASE_URL!, SUPABASE_SERVICE_ROLE_KEY!);
    const logPrefix = `[VTO-QA-Orchestrator][${pack_id}]`;
    console.log(`${logPrefix} Starting analysis orchestration.`);

    await supabase
      .from('mira-agent-vto-packs-jobs')
      .update({
        synthesis_report: 'Analysis in progress...',
        synthesis_thinking: 'The analysis is currently being generated by the AI. This may take a few minutes.'
      })
      .eq('id', pack_id);

    const { data: completedJobs, error: fetchJobsError } = await supabase
      .from('mira-agent-bitstudio-jobs')
      .select('id, comparative_report') // Fetch the report data directly
      .eq('vto_pack_job_id', pack_id)
      .eq('status', 'complete')
      .not('final_image_url', 'is', null);

    if (fetchJobsError) throw new Error(`Failed to fetch child jobs: ${fetchJobsError.message}`);
    if (!completedJobs || completedJobs.length === 0) {
      return new Response(JSON.stringify({ success: true, message: "No completed jobs found in this pack to analyze." }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }
    console.log(`${logPrefix} Found ${completedJobs.length} completed jobs with reports in the pack.`);

    const reportsToAnalyze = completedJobs.map(job => job.comparative_report).filter(Boolean);
    if (reportsToAnalyze.length === 0) {
        throw new Error("No valid comparative reports found in the fetched jobs.");
    }

    const chunks = [];
    for (let i = 0; i < reportsToAnalyze.length; i += CHUNK_SIZE) {
        chunks.push(reportsToAnalyze.slice(i, i + CHUNK_SIZE));
    }

    const newChunkJobs = chunks.map(chunk => ({
        pack_id: pack_id,
        status: 'pending',
        chunk_data: chunk,
    }));

    const { error: insertError } = await supabase
      .from('mira-agent-vto-report-chunks')
      .insert(newChunkJobs);

    if (insertError) throw new Error(`Failed to create chunk jobs: ${insertError.message}`);

    supabase.functions.invoke('MIRA-AGENT-watchdog-background-jobs').catch(console.error);

    const message = `Successfully created ${chunks.length} analysis chunk jobs. Processing will begin shortly.`;
    console.log(`${logPrefix} ${message}`);
    return new Response(JSON.stringify({ success: true, message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    console.error("[VTO-QA-Orchestrator] Error:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});